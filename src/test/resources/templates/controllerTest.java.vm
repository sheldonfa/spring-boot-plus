package ${package.Controller};

import ${package.Entity}.${entity};
import ${package.Service}.${table.serviceName};
import ${cfg.queryParamPath};
import ${cfg.queryVoPath};
import ${cfg.dtoPath};
import ${cfg.dtoPath};
import ${cfg.convertPath};
import ${cfg.apiResult};
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
#if(${swagger2})
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
#end
import lombok.extern.slf4j.Slf4j;
import io.geekidea.springbootplus.common.constraints.MessageCode;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.core.metadata.IPage;
import io.geekidea.springbootplus.util.CommonUtils;
import io.geekidea.springbootplus.util.ExceptionUtil;
#if(${cfg.paramValidation})
import javax.validation.Valid;
#end
import ${cfg.paging};
import ${cfg.idParamPath};

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;
import org.springframework.test.annotation.Rollback;
import org.springframework.transaction.annotation.Transactional;

/**
 * <pre>
 * $!{table.comment} 前端控制器
 * </pre>
 *
 * @author ${author}
 * @since ${date}
 */
@SpringBootTest
@ActiveProfiles("ut")
@Rollback
@Transactional
public class ${table.controllerName}Test extends BaseTest {

    @Test
    public void add${entity}() throws Exception {
        // 参数
        //TODO
        ${entity}Dto dto = new ${entity}Dto();
        // test
        String reqUrl = "/v1/api/${cfg.entityObjectName}/add";
        String contentAsString = this.mockMvc.perform(RestDocumentationRequestBuilders.post(reqUrl, 1L)
                .contentType(MediaType.APPLICATION_JSON_UTF8)
                .content(JSON.toJSONString(dto))
                .accept(MediaType.APPLICATION_JSON_UTF8))
                .andExpect(status().isOk()).andReturn().getResponse().getContentAsString();
        Boolean response = TestUtil.parseObj(contentAsString, ${entity}AddVo.class);
        // assert
        assertThat(response.getAdded(), is(true));
        Page<${entity}Dto> query = pageList();
        assertThat(query.getRecords().size(), is(2));
    }

    @Test
    public void update${entity}() throws Exception {
        // 参数
        //TODO
        ${entity}Dto dto = new ${entity}Dto();
        // test
        String reqUrl = "/v1/internal/${cfg.entityObjectName}/update";
        String contentAsString = this.mockMvc.perform(RestDocumentationRequestBuilders.post(reqUrl, 1L)
                .contentType(MediaType.APPLICATION_JSON_UTF8)
                .content(JSON.toJSONString(dto))
                .accept(MediaType.APPLICATION_JSON_UTF8))
                .andExpect(status().isOk()).andReturn().getResponse().getContentAsString();
        Boolean response = TestUtil.parseObj(contentAsString, Boolean.class);
        // assert
        assertThat(response, is(true));
        Page<${entity}Dto> query = pageList();
        // TODO 判断更新的值可以查询出来
        assertThat(query.getRecords().size(), is(2));
    }

    @Test
    public void delete${entity}() throws Exception {
        // 参数
        //TODO 输入预设值的主键
        String ${cfg.entityObjectName}Id = "1234" ;
        // test
        String reqUrl = "/v1/internal/${cfg.entityObjectName}/delete/"+${cfg.entityObjectName}Id ;
        String contentAsString = this.mockMvc.perform(RestDocumentationRequestBuilders.delete(reqUrl, 1L)
                .contentType(MediaType.APPLICATION_JSON_UTF8)
                .accept(MediaType.APPLICATION_JSON_UTF8))
                .andExpect(status().isOk()).andReturn().getResponse().getContentAsString();
        Boolean response = TestUtil.parseObj(contentAsString, Boolean.class);
        // assert
        assertThat(response, is(true));
        ${entity}Dto ${cfg.entityObjectName} = getInfo(${cfg.entityObjectName}Id);
        assertThat(${cfg.entityObjectName}, is(nullValue()));
    }

    @Test
    public void get${entity}() throws Exception {
        getInfo(//TODO id);
    }

    @Test
    public void get${entity}PageList() throws Exception {
        pageList();
    }

    public Page<${entity}Dto> pageList() throws Exception {
        String reqUrl = "/v1/internal/${cfg.entityObjectName}/pageList";
        String contentAsString = this.mockMvc.perform(RestDocumentationRequestBuilders.post(reqUrl, 1L)
                .contentType(MediaType.APPLICATION_JSON_UTF8)
                .content(JSON.toJSONString(new ${entity}QueryParam()))
                .accept(MediaType.APPLICATION_JSON_UTF8))
                .andExpect(status().isOk())
                .andReturn().getResponse().getContentAsString();
        return TestUtil.parsePage(contentAsString, ${entity}Dto.class);
    }

    public ${entity}Dto getInfo(String id) throws Exception {
        String reqUrl = "/v1/internal/${cfg.entityObjectName}/info/" + id;
        String contentAsString = this.mockMvc.perform(RestDocumentationRequestBuilders.get(reqUrl)
                .accept(MediaType.APPLICATION_JSON_UTF8))
                .andExpect(status().isOk())
                .andReturn().getResponse().getContentAsString();
        return TestUtil.parseObj(contentAsString, ${entity}Dto.class);
    }

}