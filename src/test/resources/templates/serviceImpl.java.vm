package ${package.ServiceImpl};

import ${package.Entity}.${entity};
import ${package.Mapper}.${table.mapperName};
import ${package.Service}.${table.serviceName};
import ${cfg.queryParamPath};
import ${cfg.queryVoPath};
import ${superServiceImplClassPackage};
import ${cfg.paging};
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.core.metadata.OrderItem;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;

import java.io.Serializable;


/**
 * <pre>
 * $!{table.comment} 服务实现类
 * </pre>
 *
 * @author ${author}
 * @since ${date}
 */
@Slf4j
@Service
#if(${kotlin})
open class ${table.serviceImplName} : ${superServiceImplClass}<${table.mapperName}, ${entity}>(), ${table.serviceName} {

}
#else
public class ${table.serviceImplName} extends BaseServiceImpl<${table.mapperName}, ${entity}> implements ${table.serviceName} {

    @Autowired
    private ${table.mapperName} ${cfg.mapperObjectName};

    @Transactional(rollbackFor = Exception.class)
    @Override
    public boolean save${entity}(${entity}AddParam param) {
        ${entity} ${cfg.entityObjectName} = ${entity}Converter.to${entity}(param);
        return save(${cfg.entityObjectName});
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public boolean update${entity}(${entity}UpdateParam param) {
        ${entity} ${cfg.entityObjectName} = ${entity}Converter.to${entity}(param);
        return updateById(${cfg.entityObjectName});
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public boolean delete${entity}(Long id) {
    return super.removeById(id);
    }

    @Override
    public ${entity} get${entity}ByPk(Serializable id) {
        return getById(id);
    }

    @Override
    public List<FinancialPlan> list(FinancialPlanQueryParamDto ${cfg.entityObjectName}QueryParam) {
        LambdaQueryWrapper<${entity}> queryWrapper = Wrappers.<${entity}>lambdaQuery().orderByDesc(${entity}::getCreateTime);
        if (CommonUtils.notEmpty(${entity}QueryParam.get条件())) {
            queryWrapper.eq(${entity}::get条件, ${cfg.entityObjectName}QueryParam.get条件());
        }
        return list(queryWrapper);
    }

    @Override
    public IPage<${entity}> pageList(${entity}QueryParam ${cfg.entityObjectName}QueryParam) {
        Page<${entity}> page = setPageParam(${cfg.entityObjectName}QueryParam);
        LambdaQueryWrapper<${entity}> queryWrapper = Wrappers.<${entity}>lambdaQuery().orderByDesc(${entity}::getCreateTime);
        if (CommonUtils.notEmpty(${entity}QueryParam.get条件())) {
            queryWrapper.eq(${entity}::get条件, ${cfg.entityObjectName}QueryParam.get条件());
        }
        return page(page, queryWrapper);
    }

}
#end
