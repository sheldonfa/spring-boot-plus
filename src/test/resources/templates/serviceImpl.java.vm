package ${package.ServiceImpl};

import ${package.Entity}.${entity};
import ${package.Mapper}.${table.mapperName};
import ${package.Service}.${table.serviceName};
import ${cfg.queryParamPath};
import ${cfg.queryVoPath};
import ${superServiceImplClassPackage};
import ${cfg.paging};
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.core.metadata.OrderItem;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;

import java.io.Serializable;


/**
 * <pre>
 * $!{table.comment} 服务实现类
 * </pre>
 *
 * @author ${author}
 * @since ${date}
 */
@Slf4j
@Service
@Transactional
#if(${kotlin})
open class ${table.serviceImplName} : ${superServiceImplClass}<${table.mapperName}, ${entity}>(), ${table.serviceName} {

}
#else
public class ${table.serviceImplName} extends BaseServiceImpl<${table.mapperName}, ${entity}> implements ${table.serviceName} {

    @Autowired
    private ${table.mapperName} ${cfg.mapperObjectName};
#if(${cfg.generatorStrategy} != 'SIMPLE')
#if(${cfg.generatorStrategy} == 'ALL')

    @Override
    public boolean save${entity}(${entity} ${cfg.entityObjectName}) throws Exception {
        ResponseWrapper<Boolean> flag;
        // 添加操作人邮箱、id、名称
        tkdDto.setOperateId(currentUser.getUid());
        tkdDto.setOperateName(currentUser.getUsername());
        tkdDto.setOperateEmail(currentUser.getEmail());
        ResponseWrapper<TkdDto> tkdDtoResponseWrapper;
        try {
        tkdDtoResponseWrapper = seagullDataServiceClient.getTkdByCode(tkdDto.getCode());
        } catch (Exception e) {
        Log.error("seagullDataServiceClient.getTkdByCode", e);
        throw ExceptionUtil.dataServiceError("seagullDataServiceClient.getTkdByCode");
        }
        if (Objects.nonNull(tkdDtoResponseWrapper.getData())) {
        throw ExceptionUtil.invalidParam(String.format("当前code的tkd已经存在，code=%s", tkdDtoResponseWrapper.getCode()));
        }
        try {
        flag = seagullDataServiceClient.addTkd(tkdDto);
        // 删除缓存
        redisUtil.del(String.join(RedisConstant.SEPARATOR, RedisConstant.XP_SEAGULL_TKD, tkdDto.getCode()));
        } catch (Exception e) {
        Log.error("addTkd", e);
        throw ExceptionUtil.dataServiceError("addTkd");
        }
        return flag.getData();
    }

    @Override
    public boolean update${entity}(${entity} ${cfg.entityObjectName}) throws Exception {
        ResponseWrapper<Boolean> flag;
        // 添加操作人邮箱、id、名称
        tkdDto.setOperateId(currentUser.getUid());
        tkdDto.setOperateName(currentUser.getUsername());
        tkdDto.setOperateEmail(currentUser.getEmail());
        try {
        flag = seagullDataServiceClient.deleteTkd(tkdDto.getRecordId());
        if (flag.getData()) {
        seagullDataServiceClient.addTkd(tkdDto);
        }
        // 删除缓存
        redisUtil.del(String.join(RedisConstant.SEPARATOR, RedisConstant.XP_SEAGULL_TKD, tkdDto.getCode()));
        } catch (Exception e) {
        Log.error("updateTkd", e);
        throw ExceptionUtil.dataServiceError("updateTkd");
        }
        return flag.getData();
    }

    @Override
    public boolean delete${entity}(Long id) throws Exception {
        return super.removeById(id);
    }
#end

    @Override
    public ${entity} get${entity}ByPk(Serializable id) throws Exception {
        return getById(id);
    }

    @Override
    public IPage<${entity}> get${entity}PageList(${entity}QueryParam ${cfg.entityObjectName}QueryParam) throws Exception {
        ResponseWrapper<Page<TkdDto>> tkdPageWrapper;
        try {
        tkdPageWrapper = seagullDataServiceClient.getTkdPageList(tkdQueryParam);
        } catch (Exception e) {
        Log.error("getTkdPageList", e);
        throw ExceptionUtil.dataServiceError("getTkdPageList");
        }
        return tkdPageWrapper.getData();
    }
#end

}
#end
