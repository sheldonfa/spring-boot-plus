package ${cfg.adminControllerPath};

import ${package.Entity}.${entity};
import ${package.Service}.${table.serviceName};
import ${cfg.queryParamPath};
import ${cfg.queryVoPath};
import ${cfg.dtoPath};
import ${cfg.dtoPath};
import ${cfg.convertPath};
import ${cfg.apiResult};
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
#if(${swagger2})
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
#end
import lombok.extern.slf4j.Slf4j;
import io.geekidea.springbootplus.common.constraints.MessageCode;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.core.metadata.IPage;
import io.geekidea.springbootplus.util.CommonUtils;
import io.geekidea.springbootplus.util.ExceptionUtil;
#if(${cfg.paramValidation})
import javax.validation.Valid;
#end
import ${cfg.paging};
import ${cfg.idParamPath};

/**
 * <pre>
 * $!{table.comment} 前端控制器
 * </pre>
 *
 * @author ${author}
 * @since ${date}
 */
@RestController
@RequestMapping("${cfg.adminRequestMapPrefix}${cfg.entityObjectName}")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else

public class Admin${table.controllerName} {

    @Autowired
    private ${table.serviceName} ${cfg.entityObjectName}Service;

#if(${cfg.generatorStrategy} != 'SIMPLE')
    /**
     * 添加$!{table.comment}
     */
    @PostMapping("/add")
    public ResponseWrapper<Boolean> add${entity}(#if(${cfg.paramValidation})@Valid#end @RequestBody ${entity}AddParam param,
            HttpServletRequest request,
            HttpServletResponse response) {
        AdminDTO currentUser = AdminUtil.getCurrentAdminOrElseGetDefault(request, response);
        Boolean flag = ${cfg.entityObjectName}Service.add${entity}(Admin${entity}Convertor.to${entity}Dto(param), currentUser);
        return ResponseWrapper.success(MessageCode.SUCCESS.code(), flag);
    }

    /**
     * 修改$!{table.comment}
     */
    @PostMapping("/update")
#if(${cfg.requiresPermissions})
    @RequiresPermissions("$!{cfg.colonTableName}:update")
#end
    public ResponseWrapper<Boolean> update${entity}(#if(${cfg.paramValidation})@Valid#end @RequestBody ${entity}UpdateParam param,
            HttpServletRequest request,
            HttpServletResponse response) {
        AdminDTO currentUser = AdminUtil.getCurrentAdminOrElseGetDefault(request, response);
        Boolean flag = ${cfg.entityObjectName}Service.update${entity}(Admin${entity}Convertor.to${entity}Dto(param), currentUser);
        return ResponseWrapper.success(MessageCode.SUCCESS.code(), flag);
    }

    /**
     * 删除$!{table.comment}
     */
    @PostMapping("/delete")
    public ResponseWrapper<Boolean> delete${entity}(@RequestParam("recordId") String recordId,
                                                    HttpServletRequest request,
                                                    HttpServletResponse response) {
        AdminDTO currentUser = AdminUtil.getCurrentAdminOrElseGetDefault(request, response);
        Boolean flag = ${cfg.entityObjectName}Service.delete${entity}ByPk(recordId, currentUser);
        return ResponseWrapper.success(MessageCode.SUCCESS.code(), flag);
    }

    /**
     * 获取$!{table.comment}
     */
    @GetMapping("/info")
    public ResponseWrapper<${entity}Dto> get${entity}(@RequestParam("recordId") String recordId) {
            ${entity}Dto ${cfg.entityObjectName} = ${cfg.entityObjectName}Service.get${entity}ByPk(recordId);
        return ResponseWrapper.success(MessageCode.SUCCESS.code(), ${cfg.entityObjectName});
    }

    /**
     * $!{table.comment}分页列表
     */
    @PostMapping("/pageList")
    public ResponseWrapper<Page<${entity}Dto>> get${entity}PageList(#if(${cfg.paramValidation})@Valid#end @RequestBody ${entity}QueryParam ${cfg.entityObjectName}QueryParam) {
        Page<${entity}Dto> page = ${cfg.entityObjectName}Service.get${entity}PageList(${cfg.entityObjectName}QueryParam);
        return ResponseWrapper.success(MessageCode.SUCCESS.code(), page);
    }
#end

}
#end